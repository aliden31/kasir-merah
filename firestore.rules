rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
    
    // Helper function to check user role
    function isUserRole(role) {
      return get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == role;
    }

    // USERS collection:
    // Admin can read/write any user.
    // Authenticated users can only read their own data.
    match /users/{userId} {
      allow read: if request.auth != null && (request.auth.uid == userId || isUserRole('admin'));
      allow write: if isUserRole('admin');
    }

    // SETTINGS collection:
    // Only admins can read/write.
    match /settings/{docId} {
      allow read, write: if isUserRole('admin');
    }
    
    // PUBLIC_SETTINGS collection:
    // All users can read, only admins can write.
    match /publicSettings/{docId} {
        allow read: if true;
        allow write: if isUserRole('admin');
    }

    // PRODUCTS collection:
    // Authenticated users can read.
    // Admins can write.
    match /products/{productId} {
      allow read: if request.auth != null;
      allow write: if isUserRole('admin');
    }

    // SALES, RETURNS, EXPENSES, ACTIVITYLOGS, STOCKOPNAMELOGS collections:
    // Admin can read/write all.
    // Cashier can only create new documents.
    match /sales/{saleId} {
      allow read, write: if isUserRole('admin');
      allow create: if isUserRole('kasir');
    }

    match /returns/{returnId} {
       allow read, write: if isUserRole('admin');
       allow create: if isUserRole('kasir');
    }

    match /expenses/{expenseId} {
       allow read, write: if isUserRole('admin');
       allow create: if isUserRole('kasir');
    }

    match /activityLogs/{logId} {
       allow read, write: if isUserRole('admin');
       allow create: if isUserRole('kasir');
    }
    
    match /stockOpnameLogs/{logId} {
       allow read, write: if isUserRole('admin');
    }
  }
}
